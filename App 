import React, { useState, useEffect, useRef } from 'react';

const App = () => {
  const [currentPage, setCurrentPage] = useState('Overview');
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);
  const [transactions, setTransactions] = useState([
    { description: 'Groceries', amount: -75.20, category: 'Food' },
    { description: 'Freelance work', amount: 500.00, category: 'Income' },
    { description: 'Coffee shop', amount: -5.50, category: 'Food' },
    { description: 'Netflix subscription', amount: -15.49, category: 'Entertainment' },
    { description: 'Gym membership', amount: -45.00, category: 'Health' },
  ]);
  const [newTransaction, setNewTransaction] = useState({ description: '', amount: '' });
  const [insights, setInsights] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const startX = useRef(0);
  const isDragging = useRef(false);
  const sidebarWidth = 280;
  const sidebarRef = useRef(null);
  
  const API_KEY = ""; // Gemini API Key
  const API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${API_KEY}`;
  
  const getFinancialInsights = async () => {
    setIsLoading(true);
    setInsights('');
    const transactionText = transactions.map(t => `${t.description}: $${t.amount}`).join('\n');
    const systemPrompt = "You are a financial analyst. Provide a brief, single-paragraph summary of the user's financial habits based on their transactions. Focus on spending categories and highlight any noteworthy trends. Do not mention specific transaction amounts.";
    const userQuery = `Analyze the following transactions:\n${transactionText}`;
    
    const payload = {
        contents: [{ parts: [{ text: userQuery }] }],
        systemInstruction: { parts: [{ text: systemPrompt }] },
        tools: [{ "google_search": {} }],
    };

    try {
        const response = await fetch(API_URL, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
        });
        const result = await response.json();
        const generatedText = result?.candidates?.[0]?.content?.parts?.[0]?.text;
        setInsights(generatedText || 'Could not generate insights. Please try again.');
    } catch (error) {
        console.error('Error fetching insights:', error);
        setInsights('An error occurred. Please try again later.');
    } finally {
        setIsLoading(false);
    }
  };

  const handleTouchStart = (e) => {
    isDragging.current = true;
    startX.current = e.touches[0].clientX;
    sidebarRef.current.style.transition = 'none';
  };

  const handleTouchMove = (e) => {
    if (!isDragging.current) return;
    const currentX = e.touches[0].clientX;
    const diffX = currentX - startX.current;
    if (diffX > 0) {
      const newTranslateX = Math.min(0, diffX - sidebarWidth);
      sidebarRef.current.style.transform = `translateX(${newTranslateX}px)`;
    }
  };

  const handleTouchEnd = (e) => {
    isDragging.current = false;
    sidebarRef.current.style.transition = 'transform 0.3s cubic-bezier(0.2, 0.8, 0.5, 1)';
    const endX = e.changedTouches[0].clientX;
    const diffX = endX - startX.current;
    if (diffX > sidebarWidth / 2) {
      setIsSidebarOpen(true);
    } else {
      setIsSidebarOpen(false);
    }
  };

  useEffect(() => {
    window.addEventListener('touchstart', handleTouchStart, { passive: true });
    window.addEventListener('touchmove', handleTouchMove, { passive: false });
    window.addEventListener('touchend', handleTouchEnd);

    return () => {
      window.removeEventListener('touchstart', handleTouchStart);
      window.removeEventListener('touchmove', handleTouchMove);
      window.removeEventListener('touchend', handleTouchEnd);
    };
  }, []);

  useEffect(() => {
    if (sidebarRef.current) {
      const translateX = isSidebarOpen ? 0 : -sidebarWidth;
      sidebarRef.current.style.transform = `translateX(${translateX}px)`;
    }
  }, [isSidebarOpen]);

  const navLinks = [
    { href: 'Overview', label: 'Overview' },
    { href: 'Payments', label: 'Payments' },
    { href: 'Investments', label: 'Investments' },
    { href: 'Services', label: 'Direct Services' },
    { href: 'Crowdfunding', label: 'Crowdfunding' },
  ];

  const handleAddTransaction = (e) => {
    e.preventDefault();
    if (newTransaction.description && newTransaction.amount) {
      setTransactions([...transactions, {
        description: newTransaction.description,
        amount: parseFloat(newTransaction.amount),
        category: 'Uncategorized' // Default category
      }]);
      setNewTransaction({ description: '', amount: '' });
    }
  };

  const menuIcon = (
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="lucide lucide-menu">
      <line x1="4" x2="20" y1="12" y2="12"></line>
      <line x1="4" x2="20" y1="6" y2="6"></line>
      <line x1="4" x2="20" y1="18" y2="18"></line>
    </svg>
  );

  const HomeIcon = (props) => (
    <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
      <path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
      <polyline points="9 22 9 12 15 12 15 22"></polyline>
    </svg>
  );
  
  const UserIcon = (props) => (
    <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
      <path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2"></path>
      <circle cx="12" cy="7" r="4"></circle>
    </svg>
  );

  const TrendingUpIcon = (props) => (
    <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
      <polyline points="22 7 13.5 15.5 8.5 10.5 2 17"></polyline>
      <polyline points="16 7 22 7 22 13"></polyline>
    </svg>
  );

  const SettingsIcon = (props) => (
    <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
      <path d="M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.26.47a2 2 0 0 0 .73 2.73l.15.08a2 2 0 0 1 1 1.73v.5a2 2 0 0 1-1 1.73l-.15.08a2 2 0 0 0-.73 2.73l.26.47a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.26-.47a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.73v-.5a2 2 0 0 1 1-1.73l.15-.08a2 2 0 0 0 .73-2.73l-.26-.47a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2-1.73V4a2 2 0 0 0-2-2z"></path>
      <circle cx="12" cy="12" r="3"></circle>
    </svg>
  );

  const renderPage = () => {
    switch (currentPage) {
      case 'Overview':
        const currentBalance = transactions.reduce((sum, t) => sum + t.amount, 0);
        return (
          <div className="md:col-span-2 space-y-6">
            <section id="overview" className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <div className="p-6 rounded-xl shadow-lg bg-white">
                <p className="text-sm font-light opacity-80">Current Balance</p>
                <div className="text-5xl font-bold mt-2">${currentBalance.toFixed(2)}</div>
              </div>
              <div className="p-6 rounded-xl shadow-lg bg-gray-50">
                <h2 className="text-2xl font-semibold text-gray-800 mb-4">Add Transaction</h2>
                <form className="space-y-4" onSubmit={handleAddTransaction}>
                  <div>
                    <label htmlFor="description" className="block text-sm font-medium text-gray-700">Description</label>
                    <input 
                      type="text" 
                      id="description" 
                      value={newTransaction.description}
                      onChange={(e) => setNewTransaction({ ...newTransaction, description: e.target.value })}
                      required 
                      className="mt-1 block w-full rounded-md border-gray-300 shadow-sm" />
                  </div>
                  <div>
                    <label htmlFor="amount" className="block text-sm font-medium text-gray-700">Amount ($)</label>
                    <input 
                      type="number" 
                      id="amount" 
                      value={newTransaction.amount}
                      onChange={(e) => setNewTransaction({ ...newTransaction, amount: e.target.value })}
                      required 
                      step="0.01" 
                      className="mt-1 block w-full rounded-md border-gray-300 shadow-sm" />
                  </div>
                  <button type="submit" className="w-full py-2 px-4 rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 transition-colors">Add Transaction</button>
                </form>
              </div>
              <div className="p-6 rounded-xl shadow-lg bg-white lg:col-span-2">
                <h2 className="text-2xl font-semibold text-gray-800 mb-4">Transaction History</h2>
                <div className="space-y-3">
                  {transactions.length > 0 ? (
                    transactions.map((t, index) => (
                      <div key={index} className="flex justify-between items-center p-3 rounded-lg bg-gray-50">
                        <span className="text-gray-800 font-medium">{t.description}</span>
                        <span className={`font-semibold ${t.amount >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                          ${t.amount.toFixed(2)}
                        </span>
                      </div>
                    ))
                  ) : (
                    <p className="text-center text-gray-500 mt-4">No transactions yet. Add one!</p>
                  )}
                </div>
              </div>
            </section>
            <section id="insights" className="mt-6 p-6 rounded-xl shadow-lg bg-white lg:col-span-2">
              <h2 className="text-2xl font-semibold text-gray-800 mb-4">Financial Insights</h2>
              <button
                onClick={getFinancialInsights}
                disabled={isLoading}
                className="w-full py-3 px-4 rounded-md shadow-sm text-lg font-medium text-white bg-violet-600 hover:bg-violet-700 transition-colors disabled:bg-gray-400 disabled:cursor-not-allowed"
              >
                {isLoading ? 'Analyzing...' : '✨ Get AI Financial Insights'}
              </button>
              {insights && (
                <div className="mt-4 p-4 rounded-lg bg-gray-50 border border-gray-200">
                  <p className="text-gray-700 whitespace-pre-wrap">{insights}</p>
                </div>
              )}
            </section>
          </div>
        );
      case 'Payments':
        return (
          <div className="p-8 rounded-xl shadow-lg bg-white">
            <h2 className="text-3xl font-bold mb-4">Payments</h2>
            <p className="text-gray-600">This section would contain features for sending money and paying bills.</p>
          </div>
        );
      case 'Investments':
        return (
          <div className="p-8 rounded-xl shadow-lg bg-white">
            <h2 className="text-3xl font-bold mb-4">Investments</h2>
            <p className="text-gray-600">This section would show your investment portfolio and market data.</p>
          </div>
        );
      case 'Services':
        return (
          <div className="p-8 rounded-xl shadow-lg bg-white">
            <h2 className="text-3xl font-bold mb-4">Direct Services</h2>
            <p className="text-gray-600">This would be a marketplace for direct services.</p>
          </div>
        );
      case 'Crowdfunding':
        return (
          <div className="p-8 rounded-xl shadow-lg bg-white">
            <h2 className="text-3xl font-bold mb-4">Crowdfunding</h2>
            <p className="text-gray-600">This section would manage group purchases for bulk goods.</p>
          </div>
        );
      case 'Settings':
        return (
          <div className="p-8 rounded-xl shadow-lg bg-white">
            <h2 className="text-3xl font-bold mb-4">Settings</h2>
            <p className="text-gray-600">Customize your app preferences here.</p>
          </div>
        );
      default:
        return null;
    }
  };

  return (
    <div className="min-h-screen bg-gray-100 font-sans antialiased text-gray-800">
      <style>{`
        body { font-family: 'Inter', sans-serif; }
        .dashboard-card { background-color: white; border-radius: 1.5rem; box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05); transition: transform 0.2s; }
        .dashboard-card:hover { transform: translateY(-5px); }
        .side-menu-container { position: fixed; top: 0; left: 0; height: 100%; max-width: 280px; z-index: 50; transition: transform 0.3s ease-out; box-shadow: 0 0 20px rgba(0,0,0,0.2); }
        .menu-backdrop { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.4); z-index: 40; opacity: 0; visibility: hidden; transition: opacity 0.3s ease; }
        .menu-backdrop.open { opacity: 1; visibility: visible; }
        @media (min-width: 1024px) {
          .side-menu-container { transform: translateX(0) !important; position: static; box-shadow: none; }
          .menu-backdrop { display: none; }
        }
      `}</style>

      {/* Mobile-only menu button */}
      <div className="lg:hidden fixed top-4 left-4 z-50">
        <button onClick={() => setIsSidebarOpen(true)} className="p-2 bg-indigo-600 text-white rounded-full shadow-lg">
          {menuIcon}
        </button>
      </div>
      
      {/* Sidebar Component */}
      <div 
        ref={sidebarRef}
        className="side-menu-container bg-gray-50 flex flex-col p-6"
        style={{ transform: `translateX(${-sidebarWidth}px)` }}
      >
        <div className="flex items-center space-x-2 mb-8">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="lucide lucide-chart-line text-3xl text-indigo-600">
              <path d="M3 3v18h18"></path>
              <path d="m18 10-5 5-4-4-3 3"></path>
            </svg>
            <h1 className="text-3xl font-bold text-gray-900">Fintech</h1>
        </div>
        <nav className="space-y-2 text-lg font-medium flex-1">
          {navLinks.map((link) => (
            <div key={link.href}>
              <a 
                href="#"
                onClick={() => { setCurrentPage(link.href); setIsSidebarOpen(false); }}
                className={`flex items-center space-x-3 p-3 rounded-xl transition-colors ${currentPage === link.href ? 'bg-indigo-100 text-indigo-700 hover:bg-indigo-200' : 'text-gray-600 hover:bg-gray-100'}`}
              >
                {link.label === 'Overview' && <HomeIcon className="h-6 w-6" />}
                {link.label === 'Payments' && <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="lucide lucide-credit-card"><rect width="20" height="14" x="2" y="5" rx="2"></rect><line x1="2" x2="22" y1="10" y2="10"></line></svg>}
                {link.label === 'Investments' && <TrendingUpIcon className="h-6 w-6" />}
                {link.label === 'Services' && <UserIcon className="h-6 w-6" />}
                {link.label === 'Crowdfunding' && <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="lucide lucide-hand-holding-usd"><path d="M12 2C6.477 2 2 6.477 2 12s4.477 10 10 10 10-4.477 10-10S17.523 2 12 2z"></path><path d="M12 18V6"></path><path d="M17 12H7"></path><path d="M12 15a3 3 0 1 0 0-6 3 3 0 0 0 0 6z"></path><path d="M12 18a6 6 0 1 0 0-12 6 6 0 0 0 0 12z"></path></svg>}
                <span>{link.label}</span>
              </a>
            </div>
          ))}
        </nav>
        <div className="mt-auto p-4">
          <a href="#" onClick={() => { setCurrentPage('Settings'); setIsSidebarOpen(false); }} className="flex items-center gap-3 rounded-lg p-3 text-gray-600 transition-all hover:bg-gray-100 hover:text-primary">
            <SettingsIcon className="h-6 w-6" />
            <span>Settings</span>
          </a>
        </div>
      </div>
      
      {/* Main Content */}
      <main className="p-8 lg:ml-72 transition-all">
        {renderPage()}
      </main>

      {/* Mobile-only backdrop */}
      <div 
        onClick={() => setIsSidebarOpen(false)} 
        className={`menu-backdrop ${isSidebarOpen ? 'open' : ''}`}
      ></div>
    </div>
  );
};

export default App;
